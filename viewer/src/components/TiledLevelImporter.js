// Generated by CoffeeScript 1.4.0
(function() {

  Crafty.c("TiledLevel", {
    makeTiles: function(ts, drawType) {
      var components, i, posx, posy, sMap, sName, tHeight, tName, tNum, tWidth, tsHeight, tsImage, tsProperties, tsWidth, xCount, yCount, _i, _ref;
      tsImage = ts.image, tNum = ts.firstgid, tsWidth = ts.imagewidth;
      tsHeight = ts.imageheight, tWidth = ts.tilewidth, tHeight = ts.tileheight;
      tsProperties = ts.tileproperties;
      xCount = tsWidth / tWidth | 0;
      yCount = tsHeight / tHeight | 0;
      sMap = {};
      for (i = _i = 0, _ref = yCount * xCount; _i < _ref; i = _i += 1) {
        posx = i % xCount;
        posy = i / xCount | 0;
        sName = "tileSprite" + tNum;
        tName = "tile" + tNum;
        sMap[sName] = [posx, posy];
        components = "2D, " + drawType + ", " + sName + ", MapTile";
        if (tsProperties) {
          if (tsProperties[tNum - 1]) {
            if (tsProperties[tNum - 1]["components"]) {
              components += ", " + tsProperties[tNum - 1]["components"];
            }
          }
        }
        Crafty.c(tName, {
          comp: components,
          init: function() {
            this.addComponent(this.comp);
            return this;
          }
        });
        tNum++;
      }
      Crafty.sprite(tWidth, tHeight, tsImage, sMap);
      return null;
    },
    makeTileLayer: function(layer) {
      var i, lData, lHeight, lWidth, layerDetails, tDatum, tile, _i, _len;
      lData = layer.data, lWidth = layer.width, lHeight = layer.height;
      layerDetails = {
        tiles: [],
        width: lWidth,
        height: lHeight
      };
      for (i = _i = 0, _len = lData.length; _i < _len; i = ++_i) {
        tDatum = lData[i];
        if (tDatum) {
          tile = Crafty.e("tile" + tDatum);
          tile.x = (i % lWidth) * tile.w;
          tile.y = (i / lWidth | 0) * tile.h;
          layerDetails.tiles[i] = tile;
        }
      }
      return layerDetails;
    },
    makeObjectLayer: function(layer) {
      var i, idx, layerDetails, o, objs, poly, _i, _ref;
      layerDetails = {
        tiles: [],
        width: layer.width,
        height: layer.height,
        visible: layer.visible,
        x: layer.x,
        y: layer.y,
        w: layer.w,
        h: layer.h,
        opacity: layer.opacity,
        name: layer.name,
        objects: {}
      };
      objs = layerDetails.objects;
      console.log(layer.objects);
      for (i = _i = 0, _ref = layer.objects.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        o = layer.objects[i];
        if (o.ellipse != null) {
          poly = [];
          console.log("WARNING: Ellipse regions not supported.");
        } else if (o.polygon != null) {
          poly = (function() {
            var _j, _ref1, _results;
            _results = [];
            for (idx = _j = 0, _ref1 = o.polygon.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; idx = 0 <= _ref1 ? ++_j : --_j) {
              _results.push([o.polygon[idx].x + o.x, o.polygon[idx].y + o.y]);
            }
            return _results;
          })();
        } else {
          poly = [[o.x, o.y], [o.x + o.width, o.y], [o.x + o.width, o.y + o.height], [o.x, o.y + o.height]];
        }
        objs[o.name] = {
          region: new Crafty.polygon(poly),
          type: o.type,
          properties: o.properties,
          visible: o.visible
        };
      }
      return layerDetails;
    },
    makeImageLayer: function(layer) {
      var layerDetails;
      layerDetails = {
        name: layer.name,
        properties: layer.properties,
        transparentcolor: layer.transparentcolor
      };
      layerDetails.image = Crafty.e("2D,DOM,Image").image(layer.image).attr({
        w: layer.width,
        h: layer.height,
        x: layer.x,
        y: layer.y,
        visible: layer.visible,
        alpha: layer.alpha
      });
      return layerDetails;
    },
    makeLayer: function(layer) {
      var layerDetails, type;
      type = layer.type;
      if (layer.type === "tilelayer") {
        layerDetails = this.makeTileLayer(layer);
        layerDetails.type = "tile";
      } else if (layer.type === "objectgroup") {
        layerDetails = this.makeObjectLayer(layer);
        layerDetails.type = "object";
      } else if (layer.type === "imagelayer") {
        layerDetails = this.makeImageLayer(layer);
        layerDetails.type = "image";
      }
      this._layerArray.push(layerDetails);
      return null;
    },
    tiledLevel: function(levelURL, drawType) {
      var _this = this;
      $.ajax({
        type: 'GET',
        url: levelURL,
        dataType: 'json',
        data: {},
        async: false,
        success: function(level) {
          var l, lLayers, ts, tsImages, tss, _i, _len;
          lLayers = level.layers, tss = level.tilesets;
          drawType = drawType != null ? drawType : "Canvas";
          tsImages = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = tss.length; _i < _len; _i++) {
              ts = tss[_i];
              _results.push(ts.image);
            }
            return _results;
          })();
          for (_i = 0, _len = lLayers.length; _i < _len; _i++) {
            l = lLayers[_i];
            if (l.image != null) {
              tsImages.push(l.image);
            }
          }
          Crafty.load(tsImages, function() {
            var layer, _j, _k, _len1, _len2;
            for (_j = 0, _len1 = tss.length; _j < _len1; _j++) {
              ts = tss[_j];
              _this.makeTiles(ts, drawType);
            }
            for (_k = 0, _len2 = lLayers.length; _k < _len2; _k++) {
              layer = lLayers[_k];
              _this.makeLayer(layer);
            }
            _this.trigger("TiledLevelLoaded", _this);
            return null;
          });
          return null;
        }
      });
      return this;
    },
    getTile: function(r, c, l) {
      var layer, tile;
      if (l == null) {
        l = 0;
      }
      layer = this._layerArray[l];
      if (!(layer != null) || r < 0 || r >= layer.height || c < 0 || c >= layer.width || layer.type !== "tile") {
        return null;
      }
      tile = layer.tiles[c + r * layer.width];
      if (tile) {
        return tile;
      } else {
        return void 0;
      }
    },
    getImage: function(l) {
      var layer;
      if (l == null) {
        l = 0;
      }
      layer = this._layerArray[l];
      if (!(layer != null) || layer.type !== "image") {
        return null;
      }
      return layer.image;
    },
    getObject: function(name, l) {
      var layer, obj;
      if (l == null) {
        l = 0;
      }
      layer = this._layerArray[l];
      if (!(layer != null) || layer.type !== "object") {
        return null;
      }
      obj = layer.objects[name];
      if (obj) {
        return obj;
      } else {
        return void 0;
      }
    },
    forEachObject: function(fxn, l) {
      var layer, obj, _results;
      if (l == null) {
        l = 0;
      }
      layer = this._layerArray[l];
      if (!(layer != null) || layer.type !== "object") {
        return null;
      }
      _results = [];
      for (obj in layer.objects) {
        _results.push(fxn(layer.objects[obj]));
      }
      return _results;
    },
    init: function() {
      this._layerArray = [];
      return this;
    }
  });

}).call(this);
